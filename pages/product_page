from config.searchdata import search_text, search_text_invalid
from pages.base_page import BasePage
 
class SearchPage(BasePage):
    def __init__(self, page):
        super().__init__(page)
        self.search_input = page.locator('input[name="q"]')
        self.results_links = page.locator('h2.ProductItem__Title a')
        self.no_results_msg = page.locator('div.Segment__Content p')
 
    def _search(self, text: str, wait_selector: str):
        self.search_input.fill(text)
        self.page.wait_for_selector(wait_selector, state='visible', timeout=10000)
 
    def search_product(self, text: str):
        self._search(text, 'h2.ProductItem__Title a, div.Segment__Content p')
        return [t.strip().lower() for t in self.results_links.all_text_contents()]
 
    def search_invalid_product(self, text: str):
        self._search(text, 'div.Segment__Content p')
        message = (self.no_results_msg.first.text_content() or "").strip()
        return message, self.search_input.input_value()
 
    def run_test_search_existing_product(self):
        results = self.search_product(search_text)
        assert any(search_text.lower() in r for r in results), \
            f"'{search_text}' not found in search results: {results}"
 
        self.results_links.first.click()

       
        initial_count = self._get_cart_count()

     
        self.add_to_cart_button.click()

      
        new_count = self._get_cart_count()
        assert new_count == initial_count + 1, \
            f"Cart count did not increase. Before: {initial_count}, After: {new_count}"

    def _get_cart_count(self) -> int:
        text = self.cart_count.inner_text().strip()
        return int(text) if text.isdigit() else 0